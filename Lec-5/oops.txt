procedural programming, which structures a program like a recipe in that 
it provides a set of steps, in the form of functions and code blocks, 
that flow sequentially in order to complete a task.

Object-oriented programming (OOP) is a method of structuring a program 
by bundling related properties and behaviors into individual objects.

car:             -----> this is class of car, which is blueprint
    colour
    wheel
    gear

maruti:          ------> this is instance of class car which actually contain data
    maruti's own attributes
    car:
        colour
        wheel
        gear

suzuki:          ------> this is instance of class car which actually contain data
    suzuki's own attributes
    car:
        colour
        wheel
        gear
============================================================================================
Class:
    CLASS are a blueprint or a set of instructions to build a specific type of object. 
    It is a basic concept of Object-Oriented Programming which revolve around the real-life entities. 
    Class determines how an object will behave and what the object will contain.

Object:
    OBJECT is an instance of a class. 
    An object is nothing but a self-contained component which consists of methods and properties to make a particular type of data useful.

Inheritance:
    take from parent (own things from predecessor). 
    A parent class can share its attributes with a child class.

Polymorphism:
    Poly means different, morphology means study of shapes.
    Polymorphism means existing in many forms.
    A cursor may take different forms like an arrow, a line, cross, or other shapes depending on the behavior of the user or the program mode.
    Same function but will behave differently on different input.
    i.e.
    def add2(num1,num2):
        return num1+num2
    a1=input("Enter first number : ")
    a2=input("Enter second number : ")
    print(add2(int(a1),int(a2))
    print(add2(a1,a2))

Abstration:
    details of the programming codes are hidden away from the user, and only the essential things are displayed to the user.

Encapsulation:
    This is a programming style where implementation details are hidden. 
    It reduces software development complexity greatly. 
    With Encapsulation, only methods are exposed.
    The programmer does not have to worry about implementation details but is only concerned with the operations.
    i.e.
    class Robot(object):
    def __init__(self):
        self.a = 123
        self._b = 123
        self.__c = 123

        obj = Robot()
        print(obj.a)
        print(obj._b)
        print(obj.__c)