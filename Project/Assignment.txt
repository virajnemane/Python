#Write a Tic Tac Toe game
    #Show welcome msg first
    #Then ask player what he want to be 'X' or 'O'
    #Then randomly decide who will play first
    #get user move from number 1-9 and according to that fill board for user
    #write move for computer also.
    #write a logic for each situation
    
i.e. 

Welcome to Tic Tac Toe!
Do you want to be X or O?
x
The computer will go first.
   |   |
   |   |
   |   |
-----------
   |   |
   |   |
   |   |
-----------
   |   |
 O |   |
   |   |

What is your next move? (1-9)

############ HINT #####################
drawBoard(board):
    # This function prints out the board that it was passed.
    # "board" is a list of 10 strings representing the board = [0,'1','2','3','4','5','6','7','8','9']

inputPlayerLetter():
    # Lets the player type which letter they want to be.
    # Returns a list with the player’s letter as the first item, and the computer's letter as the second.

whoGoesFirst():
    # Randomly choose the player who goes first.

playAgain():
    # This function returns True if the player wants to play again, otherwise it returns False.

makeMove(board, letter, move):

isWinner(board, letter):
    # Given a board and a player’s letter, this function returns True if that player has won.
    
getBoardCopy(board):
    # Make a duplicate of the board list and return it the duplicate.

isSpaceFree(board, move):
    # Return true if the passed move is free on the passed board.

getPlayerMove(board):
    # Let the player type in their move.

chooseRandomMoveFromList(board, movesList):
    # Returns a valid move from the passed list on the passed board after checking that place is available.
    # Returns None if there is no valid move.

getComputerMove(board, computerLetter):
    # Given a board and the computer's letter, determine where to move and return that move.
    # First, check if we can win in the next move
    # Check if the player could win on their next move, and block them.
    # Try to take one of the corners, if they are free.
    # Try to take the center, if it is free.
    # Move on one of the sides.

isBoardFull(board):
    # Return True if every space on the board has been taken. Otherwise return False.