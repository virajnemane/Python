1. What is the output of the following code, and why?
>>> X = 'Spam'
>>> def func():
	print(X)
>>> func()



2. What is the output of this code, and why?
>>> X = 'Spam'
>>> def func():
	X = 'NI!'
>>> func()
>>> print(X)



3. What does this code print, and why?
>>> X = 'Spam'
>>> def func():
	X = 'NI'
	print(X)
>>> func()
>>> print(X)



4. What output does this code produce? Why?
>>> X = 'Spam'
>>> def func():
	global X
	X = 'NI'
>>> func()
>>> print(X)



5. What about this code—what’s the output, and why?
>>> X = 'Spam'
>>> def func():
	X = 'NI'
	def nested():
		print(X)
	nested()
>>> func()
>>> X



6. How about this example: what is its output in Python 3.X, and why?
>>> def func():
	X = 'NI'
	def nested():
		nonlocal X
		X = 'Spam'
	nested()
	print(X)
>>> func()



7. What is the output of the following code, and why?
>>> def func(a, b=4, c=5):
	print(a, b, c)
>>> func(1, 2)



8. What is the output of this code, and why?
>>> def func(a, b, c=5):
	print(a, b, c)
>>> func(1, c=3, b=2)



9. How about this code: what is its output, and why?
>>> def func(a, *pargs):
	print(a, pargs)
>>> func(1, 2, 3)



10. What does this code print, and why?
>>> def func(a, **kargs):
	print(a, kargs)
>>> func(a=1, c=3, b=2)



11. What gets printed by this, and why?
>>> def func(a, b, c=3, d=4): print(a, b, c, d)
>>> func(1, *(5, 6))



12. One last time: what is the output of this code, and why?
>>> def func(a, b, c): a = 2; b[0] = 'x'; c['a'] = 'y'
>>> l=1; m=[1]; n={'a':0}
>>> func(l, m, n)
>>> l, m, n
 
